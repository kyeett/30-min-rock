// Code generated by go-bindata.
// sources:
// player.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _playerPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x0e\x0b\xf1\xf4\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x3a\x00\x00\x00\x40\x08\x06\x00\x00\x00\x4b\x02\x64\x8f\x00\x00\x0a\xd5\x49\x44\x41\x54\x68\x81\xed\x5b\x7b\x70\x54\xd5\x19\xff\x9d\xdd\x40\x1e\x9b\xc4\xf0\x50\x48\x16\xc8\x8a\xa3\xc5\xf2\xd2\x92\x6a\x77\x21\x2c\x21\xce\x06\x64\x4c\xe8\x00\xbb\x31\xa8\x48\x12\x6c\x4a\xcb\x80\x50\x79\x15\x6a\x98\x20\x22\x48\x4a\xc7\x4a\x53\x84\x20\xcc\x80\x24\x1d\x28\xc4\x3a\x35\xab\x10\x76\x13\xb2\x43\x8d\x62\x02\x4a\x8a\x2d\x10\x43\xc0\x2a\xa0\x02\xcb\x23\x61\xf7\xf4\x8f\xcd\xb9\xb9\x77\xf7\x3e\x77\x37\x8c\xd3\xe9\x6f\x66\x67\xee\xfd\xce\x77\xce\x3d\xbf\xfb\x7d\xe7\x3b\xdf\x39\xe7\x2e\xf0\x7f\xfc\x6f\x81\xdc\x8d\x87\x0c\x1c\x30\x18\xb1\xb1\x71\x34\x58\xde\x71\xe1\x1c\x01\x00\xe3\xfd\x23\xf0\x93\xc7\x27\x72\xe5\xef\xee\xdd\x1a\xf5\x7e\xc5\x44\xbb\x41\x86\xfc\x99\xf9\x14\x00\x1a\x8e\x9d\x90\xd4\x19\x32\x74\x24\xa5\x3e\x2f\x70\xfb\x16\x72\x57\x6d\xe2\x17\xd1\x68\x93\x8d\x6a\x63\xc6\x34\x13\xcd\xb4\xfc\x0c\x44\x17\x8b\x7a\x4f\x13\x00\x80\xfa\xbc\x61\xb7\xc7\x2c\x1e\x0d\x44\xa5\x21\x3e\x41\x77\x83\x0b\x00\x30\x71\x82\x15\x00\x40\x29\x05\x21\x84\x23\x2e\x06\xf6\x32\x88\xde\x00\xea\xef\x04\x68\x17\x88\xde\x80\xd4\x41\xf7\x62\xd0\xbd\x49\x38\xde\x7c\x22\x62\xd2\x11\x55\x36\xa6\x99\xaa\x01\xcc\x1a\xf7\x68\x06\x3e\x3e\xde\x04\xa2\x37\x20\xd3\x9c\x21\xd0\x39\x73\xae\x1d\xc3\x4d\x43\xb9\xfb\x63\x4d\xcd\xe8\xec\xea\x02\xc0\xb3\xb6\x2e\x16\x84\x08\x47\x11\xf5\xdd\x00\x40\x31\xc1\x92\x89\x6b\xd7\xbd\x48\x4e\xec\x0b\xf7\x51\x0f\xb9\x70\xb1\x2d\xac\xbe\x86\x4d\xd4\x98\x66\xa2\x44\x6f\x00\xf5\x79\x41\xf4\x06\x00\x10\x90\xac\xf7\x34\x09\xee\x3f\x3a\x7e\x02\xb7\x6e\xdd\xee\x26\xe1\x05\x48\x1f\x10\x5d\x5f\x41\x7d\x31\xb0\xf2\x4c\x73\x06\x28\xa5\x70\xd5\xd7\x91\x8b\x5f\xb5\x6b\xee\x6f\x58\x44\xa5\x48\x36\x9f\x6c\xc5\xd5\x6b\xd7\xb9\x7b\x06\xc1\x78\x25\x7d\x41\x74\x7d\x04\x24\xb4\x80\xfa\x6e\xa0\xe3\xc2\x59\xcd\xfd\xd6\x5c\x41\x8c\x64\x30\xa4\x48\x32\x7d\xea\xbb\x05\xa2\x8f\x93\x7d\x0e\xf5\x79\x51\xea\xec\x89\xd8\xa5\xb6\xd1\x81\x0e\x77\x3f\x5b\xeb\x98\x55\x9c\x5e\x32\xac\xb9\x48\x4d\x1d\x2c\x98\x03\x8f\x1f\x3d\x2a\xa9\x1f\x3c\x46\x19\x41\xa2\x37\x80\x10\x02\x4a\xfd\x18\x3b\x66\x2c\x5a\x3e\xfb\xa7\x68\xfd\xb8\x3e\x7e\x8c\xcb\x2b\xc0\x13\x45\x8b\x04\xf2\x52\xe7\x09\x5c\xbd\xf4\x35\xca\x0b\xb2\x35\x7b\x01\xa0\x82\x68\x6a\xea\x60\x1a\x34\xc7\x01\x6b\x97\xe0\x13\xb7\x53\xb1\x71\x77\x83\x8b\x8b\xbe\x40\xc0\xba\x7a\xd2\x89\x7b\x92\x93\x90\x69\xce\x10\x44\xe2\x4c\x73\x06\xdc\x0d\x2e\x2c\xfb\xbb\xf4\xbc\x9b\x3c\xf0\x3e\x94\x3a\x4f\xa0\xd4\x36\x1a\xc6\x34\x13\xd5\x62\x55\x59\x45\xb3\xcd\x4e\x0b\xcb\xb7\x4b\x96\x97\xda\x46\x87\xbc\x5d\x66\x51\x36\xad\xf0\xc1\x27\xce\x48\x32\x82\x00\x04\xae\xaa\x84\x52\xdb\x68\x4d\xee\xab\x93\x2b\x1c\xd8\x3f\x05\x00\x50\xb9\xb8\x08\x35\x6b\x97\xa0\x66\xed\x12\x9c\x74\xf5\x58\x52\x8a\x64\xbd\xa7\x09\xf5\x47\xdd\x82\xb2\x7a\x4f\x93\xc0\xba\x09\xf1\xf1\x02\x92\xc3\x46\x3d\xa6\xb6\xcf\x00\x80\xc2\xf2\x5d\x8a\x3a\x66\x9b\xfd\x0a\xbb\x96\x75\xdd\x4b\x57\xbe\xeb\x6e\xb4\xc7\xaa\x35\x6b\x97\x20\x35\xfd\x01\xbc\xf1\xc2\x74\xd1\xb1\x52\xef\x69\x02\xf5\x79\x05\xa4\x80\xd0\x0c\x69\xdc\x23\x23\xc3\xb2\x24\xc3\xb0\x51\x8f\xc2\x6c\xb3\x87\xe4\xcf\xe8\xf6\x52\x8f\xb3\x1a\xa7\x3e\x76\xf7\x67\x42\x59\x8b\x7a\x9c\xd5\xa4\x66\xed\x12\x81\x2c\x77\xd5\x26\x59\x92\x81\x56\xe3\x85\xf7\x00\x88\x2e\x41\xa0\xcb\xb7\x64\xe5\xe2\x22\x41\x59\xf0\xbd\x1c\x1a\x6b\xab\x82\x7f\x14\x00\x35\xdb\xec\xba\xef\x2e\x7f\xc5\xbd\x0c\x59\xa2\x40\x60\x25\xb1\x6b\xf9\x7c\x5c\x3e\xf7\x6f\x00\xe2\xe3\x92\x0f\xea\xf3\x62\xa2\xe5\x31\x01\x49\x77\x83\x0b\xe0\x8d\x57\x77\x83\x0b\x5b\xfe\xf4\x06\xce\x77\x9c\x45\x63\x6d\x15\x0a\x67\xcf\xc0\x8e\xdf\xcc\xe3\x48\xca\xc5\x05\x86\xca\xc5\x45\x68\xac\xad\x92\x24\x0f\xc0\x67\xb6\xd9\xa9\xc7\x59\x4d\x00\x95\xf3\xa8\x31\xcd\x44\x01\x80\xe8\xe2\x01\xa2\xf8\x6e\x04\xd0\xe9\x74\xf0\x75\x5d\xe3\xb2\x1b\x77\x83\x0b\xe7\x3b\xce\x8a\xea\x5a\x72\x1c\x11\x93\x0c\x6e\x8f\x11\x55\xdd\x6b\xa2\x37\x28\x92\x14\x5b\xa9\xf8\xfd\x7e\x81\x07\x48\x91\x04\x02\x96\xd0\xe2\xb6\x4a\xe0\xbf\x0c\x45\xa2\x2c\x13\x52\x82\x54\xa6\xc4\xc8\xf3\x23\xac\x1c\x62\x62\xf4\xb2\xe5\x6d\x07\xb7\xa1\x62\xc3\x1a\x59\x1d\x4b\x8e\x03\x96\x1c\x07\x80\x9e\xc8\x2b\x4b\x34\x2d\x35\x5d\x75\x16\xa2\xa4\x27\xe7\xb2\x02\xbd\xf7\xf6\x44\x64\x55\x46\xb0\xb1\xb6\x0a\xab\xd7\x6d\x06\x80\x7e\x80\x02\x51\x42\x88\x58\xf8\x0e\x81\xe4\xe2\x9a\x52\xee\x05\xe4\xe7\xdb\x71\xe9\xf2\xb7\xb0\xe4\x38\x58\x07\x7a\x15\x96\x1c\x07\x0e\xb9\x3c\xdc\xbd\x3c\x51\x7d\x82\x5c\x31\x00\x79\x97\xa5\xfe\x1b\xdc\x75\xe3\xc9\x73\xc8\x2d\x28\x41\xb6\xd5\x8c\xb2\x95\x8b\x42\xf4\xf9\x88\x64\xac\xb2\xe0\x03\x00\xd9\x56\x33\x27\x97\x24\x6a\x4c\x33\xf9\x94\x82\xb2\x1c\xc9\xf3\x1d\x67\x03\x51\x1a\xe2\x01\x28\x5c\xab\xa6\xe7\x15\xa3\x64\xe9\xcb\xd2\x7d\xa2\x94\x66\x5b\xcd\x02\x92\x80\xbc\x45\x15\x03\x55\x30\x49\xea\xbb\x89\x39\xcf\xcd\xc0\xf9\x8e\xb3\x18\x62\xbc\x1f\x20\xba\x10\xb7\x3e\xe4\xf2\x84\xb8\x55\x38\x68\x69\x6e\x95\x2c\x2b\x5b\xb9\x88\xfb\x31\x0b\x8b\xa6\x80\x03\x07\x0c\x52\x0c\x2e\xd4\x77\x43\xe0\xda\xcc\x8a\x1c\x74\x71\xa1\xb2\x28\xa1\xb0\x7c\x3b\x5e\xd9\xb4\x0a\x55\x95\xf2\x5e\xc1\x02\x13\x20\x61\xb5\xd8\xd8\x78\xd9\x20\x14\x70\x59\x21\xc9\xb9\xbf\x5a\xc8\xdd\x0f\x31\xde\x0f\x42\xf4\x02\x92\xc1\x13\xbc\x9a\x09\x5f\x0e\xed\x1d\x17\x65\xad\xca\x4f\x16\x80\x20\x8b\x1a\xd3\x4c\xd7\x01\x18\xa4\xac\x49\xa9\x0f\xf0\x77\x0a\xac\xcd\x76\x02\xda\x0e\x6e\xe3\x64\x6c\x17\x20\x18\x6a\xc9\x89\x65\x48\x5f\x77\xa7\xa0\xd4\xef\x07\xd1\xe9\x50\x58\xbe\x1d\x25\x12\x19\x52\x30\x49\x80\x47\x34\x90\x18\x24\x40\x2a\x00\x71\x81\x47\x1f\xcf\xc9\xfa\xc6\x12\xac\x38\xd0\xb3\xf2\x68\x69\x6e\xc5\x93\x4f\x4e\x05\x20\x9f\x01\x69\x45\xdb\xc1\x6d\x21\x63\x3a\xdb\x6a\x46\x61\xf9\x76\xc1\xbc\xd9\x75\xe7\x0e\xac\xd3\x66\x87\x90\x04\x44\x58\x19\xd3\x4c\x3f\x07\xb0\x5f\xa0\x24\x11\x59\x83\x97\x57\x6c\x5f\x27\x12\x92\xe3\xa7\xe4\x63\xee\xa6\x1e\xef\xa8\x5a\xf9\x4b\x54\x96\x05\x86\x85\xe3\xa5\x8d\x3d\xf2\x8d\x2f\x61\xeb\xdf\x1a\x90\x9e\x57\x0c\x20\x90\xff\x8a\x11\x64\x08\x09\x46\x1d\x17\xce\xfd\x15\x00\xe1\x6f\x82\x05\x83\xfa\xbc\x58\xb0\xf5\x80\x40\xc6\x56\x35\xcf\x97\x14\x6b\xa4\x26\x44\x42\x4a\x3f\xee\xba\xed\xe0\x36\x8e\x24\x10\x20\xc7\xc7\x17\xdf\x78\x91\xae\xb2\x5d\x6d\x4b\x91\x6e\x04\x93\xf4\x75\x75\x71\xe3\xb2\xdf\xf8\xdc\xb0\xe7\x48\x4b\x8e\x03\x8e\xd5\x1b\x95\x15\x01\xcc\x5e\xf6\x3a\x9e\x28\x5e\xa8\xac\xd8\x0d\xe5\x43\x26\x22\x4c\xb2\xc5\x2c\x5c\x36\x2d\x03\x80\x9f\x73\xe5\xe4\xbc\x62\x58\x72\x1c\x9a\x82\x0f\x80\x90\x00\x94\x9e\x57\x8c\xad\xdd\x41\x8e\x65\x53\xec\x25\x3e\xf7\xfa\x36\x68\x81\x24\x51\xa2\x8b\xc5\xd0\x87\x47\xa2\xfd\x73\xe1\x38\x14\x73\x59\xb1\xad\x90\xc2\xf2\xed\xc8\x9e\xf5\x02\x6e\x5e\xfd\x1e\x03\xfb\xa7\x60\xec\xe8\x87\xb9\x32\x16\x58\xe2\x93\xef\xc1\xcd\xab\xdf\xcb\xae\x41\xd3\xf3\x8a\x05\x11\x9d\xc9\xc4\xc0\x5f\x68\x87\xf0\x91\x7a\xc0\xc3\x63\xad\x34\x65\xd0\x20\xb4\x9f\xfa\x8c\x93\x51\x9f\x17\xc3\x46\x3d\x86\x38\x43\x12\x72\x8a\x16\x60\x80\xe9\x01\xc9\x0e\x46\x1b\x8c\xac\x18\x49\x7e\x5e\xac\x99\x28\xdb\x6b\xe1\x13\x4d\x48\x8a\xc3\x80\x21\x77\x8f\x9c\x56\x0c\xe8\xdf\x0f\x97\xaf\x7c\x2b\x4a\x56\xd4\x75\x8d\x69\xa6\x86\x60\x19\xf5\x77\x62\xc0\x90\x91\xbd\xd1\xbf\xa8\x20\x39\x29\x11\xef\xbe\x53\x01\x00\x20\xa4\x3a\xa4\x5c\x6a\x8c\x8e\x67\x6f\x65\xc8\xd0\x91\x81\x74\x90\x76\xf5\x4e\x0f\x23\x44\xa2\x21\x01\xce\xfd\x3b\x14\xf5\x44\x89\x8a\xed\x80\x0f\x1a\xfe\xe3\xb0\x3b\x33\xb7\x60\x46\x88\x6c\xc7\x9e\x7d\x9a\xdb\x29\x7a\x66\x26\x8a\x9e\x9d\x85\xb7\x76\x06\x2c\x36\x6f\x8e\x5d\x75\x5d\xc5\xe9\x85\xfa\xbb\x40\x48\x0c\x76\xfc\xb1\xe7\xfc\xe5\x47\x23\x86\x23\x2b\xf7\x59\xc5\xc6\xdd\xef\xed\x46\x4c\x8c\xfc\x23\x76\xec\xd9\x87\x43\x07\x76\x22\x3e\x5e\xfe\x74\x8d\xe1\xad\x9d\xd5\x9a\x08\xaa\x86\x31\xcd\x44\x8d\x69\x26\xda\xfc\xe9\x29\xee\xa7\x06\x66\x9b\x5d\x95\xee\xee\xbf\xd4\x50\xb3\xcd\xae\xaa\xcd\xad\x6f\x57\xa9\x7a\xae\x18\x0f\xd5\x5f\xa5\x04\xaf\xea\x95\x92\x81\x94\xe4\x24\x55\xed\x16\xcc\x7c\x0a\x05\x33\x9f\x12\x24\x18\x6d\x5f\x76\xe0\xe9\x79\x8b\x43\x74\xd5\x24\x20\x3a\x9d\x78\xb2\xa7\x8a\xa8\xd8\x01\x10\x7f\x51\x2b\x87\x96\xe6\x56\x8c\x19\x3b\x42\x51\xaf\xb1\xb6\x0a\xed\xad\xb5\xb8\x73\xc7\x87\xd9\x4b\x76\x72\xf2\x3f\x97\xe5\x23\x25\x39\x01\x55\x4e\xe5\xe3\x7c\xb9\x3e\xa9\xca\x75\x2b\x36\xac\x41\xc5\x86\x35\x28\x9e\x3d\x4b\x8d\x3a\x07\xe6\x05\x72\x0b\xe4\x60\xc4\xc4\xe8\x51\xf5\x87\x42\xee\x3e\x25\x39\xb0\xc0\xdf\xff\xde\x07\xb2\xf5\xb2\xa7\xcf\xe1\xce\x5f\xc4\xdc\x57\xf1\x48\x62\xd8\xb0\x07\xe9\xbb\x35\x35\x02\x99\x1a\x0b\x31\xac\x5e\xb7\x19\xb3\xa6\x4d\x51\x55\xaf\xbd\xb5\x16\x00\xe0\x58\x58\x89\xc6\xda\x2a\x9c\xfb\xb2\x03\x05\xf3\x16\x63\xf7\xa6\x39\xa8\x6d\x38\x05\x8b\x79\x9a\x68\x1b\x96\x1c\x07\x0c\x09\xf1\xf0\xde\xb8\x29\x90\xf3\x13\x07\x45\xa2\x52\x83\x5b\xeb\x56\xc8\xe2\xdf\xae\xc3\x3f\x3e\x6e\xc1\x96\xd7\x4a\xd1\xaf\xff\x3d\x18\x3a\x34\x55\x50\x9e\x5b\x50\x02\xfb\xf4\xa9\x78\xc6\x9e\x87\x37\xb7\xed\xc6\xfb\x87\xdc\xb8\xdc\x7d\x6c\x19\x01\x36\x7a\x9c\xd5\x4b\x81\x08\x88\x46\x03\x8b\x5e\x98\x83\xa4\xc4\x44\x94\x95\xbf\x19\x71\x5b\x71\x71\xb1\x38\x7c\x50\x78\x38\xcc\xdf\x52\x51\x0c\x46\x3a\x9d\x0e\x5b\xd6\x0b\x23\x2e\x73\x9f\xae\xae\x3b\x58\xb8\xbc\x0c\x9f\x9e\x54\x3f\x06\xf9\xd8\xbc\x75\xa7\xa8\x3c\xe3\x91\x51\xd8\xb4\x76\x05\xfa\xf4\x89\xde\xa7\x8a\xaa\x8e\x0d\xcd\x36\x3b\xe5\x1f\xec\x68\x19\xa3\x77\x0b\x8e\xc2\x45\x68\xef\xb8\x18\x22\xff\xe6\x42\x1b\xf9\xd7\xc9\x63\xea\x89\x06\xcb\x6a\xf7\x55\x22\x29\x51\xfb\x67\x30\xe1\xe2\xc4\xe7\xa7\xf1\x8b\x17\x57\x87\x53\xf5\x03\x8f\xb3\xda\xa6\xfa\xab\x8e\xf1\x53\xf2\xa9\xdf\xef\x0f\xe7\x41\xbd\x8e\xdf\x2d\xfd\x35\xa6\x64\x67\x8a\x96\x4d\x98\xfa\x34\x8e\xbe\xbf\x97\x68\x1a\x04\x4a\xee\x7b\xed\xba\x17\x39\x33\x0a\x43\xe4\x4a\x18\x3b\x6a\x04\xa6\x3e\x31\x11\xb9\x53\xb3\x35\xd7\x55\x0b\x4d\x9f\x99\x99\x6d\xf6\x3b\x00\xf4\x8c\xf0\x0f\x65\xac\x8e\x9f\x92\x0f\x4a\xc5\x27\x07\x4d\xdf\x30\x30\xb8\xea\x8e\xd0\xe5\xaf\x6e\x51\xa5\x9b\x94\x68\xc0\x88\x07\x87\x23\x7f\xc6\x34\x98\x7f\xfa\xa8\xa2\xbe\xcf\xe7\x83\xb3\xee\x28\xde\xff\xd0\x8d\xd6\x2f\xce\xe0\xda\xf5\xf0\x3f\x68\xe6\x63\xfd\x8a\xf9\xb0\x66\x4d\x22\xaa\x89\xba\xea\x8e\x70\xaf\x4c\x2d\xd9\xde\x86\x6d\xf2\x04\x94\x2e\x5b\x20\x59\x6e\xc9\x71\x60\xfd\x8a\xf9\x00\xa0\x6d\x8c\x32\xac\x5f\x31\x1f\x9f\x7e\x76\x1a\x7b\x6b\x3e\x94\xd5\x8b\xf4\x20\x29\x12\xb4\x34\xb7\xf2\x57\x32\x54\x8b\x45\x43\x8e\x2a\x00\xa1\x75\x9d\xfb\x77\x20\xd1\xa0\x7c\x4a\xde\xdb\x68\x69\x6e\x45\xc9\xd2\x97\x99\x35\xb5\xb9\x2e\x20\x74\x5f\x3e\x96\xbf\xba\x05\xd1\x0e\x50\x6a\x56\x3c\xc1\xcf\x62\x75\xf8\x24\x81\x30\x88\x02\x91\x93\x55\xbb\x64\x5b\xb5\x7e\x33\x2e\x5d\xf9\x56\xb4\x8c\xb9\xe4\x3b\xbf\x7f\x5e\x20\x7f\xfa\xc5\xb7\x01\x00\xeb\x96\x95\x70\x32\x6b\xd6\x24\xed\x51\x97\xc1\x55\x77\x24\x03\xc0\x47\xc1\xf2\x95\xaf\x55\xc0\xef\xf7\xa3\x62\xc3\x1a\xe8\x74\x3a\x8c\x1a\xfd\x10\x00\x21\xb9\x85\xab\x5e\xc1\xed\xce\x4e\xd1\x8e\xf3\xc1\xef\xac\x14\x0e\x1f\x6b\x41\x51\xde\x43\xdc\xfd\xf6\x83\xa7\x31\xf9\xf1\x31\x00\x7a\x08\x32\x44\xf4\x2f\x09\x57\xdd\x91\xfb\x00\xfc\x27\x58\xce\xb7\x2e\x10\x70\xa5\x84\xf8\x38\xdc\xba\xdd\x29\xb0\x02\xbf\x63\xe1\xe2\xf0\xb1\x16\xee\x7a\xf2\xe3\x63\x30\xb7\xa8\x90\x9c\x39\x73\x26\x44\x2f\x6a\x7f\xa0\x09\x76\xe9\x95\xaf\x55\x70\xd7\xcc\x3a\x72\x16\x88\x10\x33\xac\x59\x93\x42\x02\x25\x1f\xbd\xf6\xdf\x34\x57\xdd\x91\x5d\x00\x42\xf6\x44\x83\x2d\x10\x26\xc6\x59\xb3\x26\x7d\xa2\xa5\xc2\x5d\xf9\x13\x9e\x18\x5c\x75\x47\xd8\xe5\x61\x00\x59\xdd\xd7\x6b\x00\x94\x5a\xb3\x26\x45\xfd\x79\xff\x05\xe7\xc6\x1d\xd9\x58\x23\x7c\x3f\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x69\xe4\xc9\x1c\x0e\x0b\x00\x00")

func playerPngBytes() ([]byte, error) {
	return bindataRead(
		_playerPng,
		"player.png",
	)
}

func playerPng() (*asset, error) {
	bytes, err := playerPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "player.png", size: 2830, mode: os.FileMode(420), modTime: time.Unix(1548966740, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"player.png": playerPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"player.png": &bintree{playerPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

